{"version":3,"file":"static/js/592.ac5db800.chunk.js","mappings":"wMAGaA,EAAW,WACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAQA,OACE,iBAAKC,UAAU,iBAAf,UACGF,IACC,gBAAKE,UAAU,eAAf,UACE,uBAAIF,OAGR,kBAAME,UAAU,aAAaC,SAXZ,SAACC,GACpBA,EAAEC,iBACFJ,EAAaH,EACd,EAQG,WACE,kBACEQ,KAAK,OACLC,YAAY,oGACZC,SAjBe,SAACJ,GAAD,OACrBL,EAAQK,EAAEK,cAAcC,MADH,KAmBjB,mBAAQJ,KAAK,SAAb,SAAsB,gEAI7B,E,QCWD,EA3B2B,WACzB,IAAQK,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAAwBd,EAAAA,EAAAA,UAAqB,IAA7C,eAAOgB,EAAP,KAAaC,EAAb,KACA,GAA8BjB,EAAAA,EAAAA,WAAS,GAAvC,eAAOkB,EAAP,KAAgBC,EAAhB,KAOA,OALAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcP,GAAU,IAC9BQ,EAAAA,EAAAA,GAAcD,EAAaF,EAAYF,EACxC,GAAE,CAACH,KAGF,iBAAKT,UAAU,OAAf,UACGa,GACC,SAACK,EAAA,EAAD,IAEAP,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,YAAR,OACP,iBAAerB,UAAU,eAAzB,WACE,eAAIA,UAAU,QAAd,SAAuBoB,KACvB,cAAGpB,UAAU,cAAb,SAA4BqB,MAFpBD,EADH,KAOX,SAAC1B,EAAD,MAGL,C,0ECrCKwB,EAAa,WACjB,OACE,iBAAKlB,UAAU,UAAf,WACE,gBAAKA,UAAU,UACf,gBAAKA,UAAU,UACf,gBAAKA,UAAU,WAGpB,C,oHCHKsB,EAAS,mCAAG,wGACOC,EAAAA,EAAAA,IAAA,UAHT,uCAEE,uBACRC,EADQ,EACRA,KACFC,EAAWD,EAAKE,QAAQC,MAAM,GAAI,IAFxB,kBAGTF,GAHS,2CAAH,qDAKFG,EAAS,mCAAG,WAAOhB,GAAP,kGAEFU,IAFE,OAEfE,EAFe,OAGfK,EAAwBC,KAAKC,MACjCC,aAAaC,QAAQ,YAAc,QAErCrB,EAAQiB,GAAUA,EAAOK,OAAS,EAAIL,EAASL,GAN1B,gDAQrBW,QAAQC,IAAR,MARqB,yDAAH,sDAWTnB,EAAa,mCAAG,WAC3BR,EACAK,EACAF,GAH2B,yFAMzBE,GAAW,GANc,SAONQ,IAPM,OAOnBE,EAPmB,OAQnBa,EAASb,EAAKa,QAAO,qBAAGjB,MAAkBX,CAArB,IAC3BG,EAAQyB,GATiB,gDAWzBF,QAAQC,IAAR,MAXyB,yBAazBtB,GAAW,GAbc,4EAAH,yD","sources":["components/ChatInfo/TextChat/Text.tsx","components/ChatInfo/Chatinfo.tsx","components/Loader/Loader.tsx","components/dataFetch/dataFetch.ts"],"sourcesContent":["import { ChangeEvent, FC, useState } from \"react\";\r\nimport \"./text.css\";\r\nimport React from \"react\";\r\nexport const Text: FC = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [textArray, setTextArray] = useState(\"\");\r\n\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setText(e.currentTarget.value);\r\n  const handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setTextArray(text);\r\n  };\r\n  return (\r\n    <div className=\"text-container\">\r\n      {textArray && (\r\n        <div className=\"message-wrap\">\r\n          <p>{textArray}</p>\r\n        </div>\r\n      )}\r\n      <form className=\"chat-input\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Введите сообщение\"\r\n          onChange={handleOnChange}\r\n        />\r\n        <button type=\"submit\">Отправить</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport \"./chatinfo.css\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport { Text } from \"./TextChat/Text\";\r\nimport React from \"react\";\r\nimport { fetchTextChat } from \"../dataFetch/dataFetch\";\r\ninterface chatIdParams extends Record<string, string | undefined> {\r\n  chatId: string;\r\n}\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\nconst Chatinfo: React.FC = () => {\r\n  const { chatId } = useParams<chatIdParams>();\r\n  const [list, setList] = useState<APIEntry[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const validChatId = chatId || \"\";\r\n    fetchTextChat(validChatId, setLoading, setList);\r\n  }, [chatId]);\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        list.map(({ API, Description }) => (\r\n          <div key={API} className=\"name-contact\">\r\n            <h1 className=\"title\">{API}</h1>\r\n            <p className=\"description\">{Description}</p>\r\n          </div>\r\n        ))\r\n      )}\r\n      <Text />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatinfo;\r\n","import React, { FC } from \"react\";\r\nimport \"./loader.css\";\r\nconst Loader: FC = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n      <div className=\"part\"></div>\r\n    </div>\r\n  );\r\n};\r\nexport { Loader };\r\n","import axios from \"axios\";\r\ninterface APIEntry {\r\n  API: string;\r\n  Description?: string;\r\n}\r\nconst baseUrl = \"https://api.publicapis.org/entries\";\r\n\r\nconst fetchBase = async (): Promise<APIEntry[]> => {\r\n  const { data } = await axios.get(`${baseUrl}`);\r\n  const listInfo = data.entries.slice(10, 20);\r\n  return listInfo;\r\n};\r\nexport const fetchData = async (setList: Function) => {\r\n  try {\r\n    const data = await fetchBase();\r\n    const locale: string | null = JSON.parse(\r\n      localStorage.getItem(\"contact\") || \"null\"\r\n    );\r\n    setList(locale && locale.length > 0 ? locale : data);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\nexport const fetchTextChat = async (\r\n  chatId: string,\r\n  setLoading: Function,\r\n  setList: Function\r\n) => {\r\n  try {\r\n    setLoading(true);\r\n    const data = await fetchBase();\r\n    const filter = data.filter(({ API }) => API === chatId);\r\n    setList(filter);\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n"],"names":["Text","useState","text","setText","textArray","setTextArray","className","onSubmit","e","preventDefault","type","placeholder","onChange","currentTarget","value","chatId","useParams","list","setList","loading","setLoading","useEffect","validChatId","fetchTextChat","Loader","map","API","Description","fetchBase","axios","data","listInfo","entries","slice","fetchData","locale","JSON","parse","localStorage","getItem","length","console","log","filter"],"sourceRoot":""}